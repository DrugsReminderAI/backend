from fastapi import FastAPI
from contextlib import asynccontextmanager
from backend.services.groq_client import ask_groq
from backend.services.yandex_stt import transcribe_oggopus
from telegram import Update
from telegram.error import BadRequest, TimedOut, RetryAfter
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import logging
import asyncio
import io
from backend.config import BOT_TOKEN

logging.basicConfig(level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("asyncio").setLevel(logging.WARNING)


@asynccontextmanager
async def lifespan(app: FastAPI):

    async def run_bot():
        app_bot = ApplicationBuilder().token(BOT_TOKEN).build()
        app_bot.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_telegram_message)
        )
        app_bot.add_handler(
            MessageHandler(filters.VOICE & ~filters.COMMAND, handle_voice_message)
        )
        app_bot.add_handler(
            MessageHandler(~filters.TEXT & ~filters.VOICE, handle_unknown_message)
        )
        await app_bot.initialize()
        await app_bot.start()
        await app_bot.updater.start_polling()
        logging.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    asyncio.create_task(run_bot())
    yield


app = FastAPI(lifespan=lifespan)


async def handle_telegram_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message_text = update.message.text
    user_id = user.id
    timestamp = update.message.date.isoformat()

    placeholder = await update.message.reply_text(
        "ü§î –Ø—Å–Ω–æ... –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å... –º–∏–Ω—É—Ç–∫—É..."
    )

    try:
        ai_reply = await ask_groq(message_text, user_id)
        reply = ai_reply or "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ, –±–µ–∑ –æ—Ç–≤–µ—Ç–∞."

        await placeholder.edit_text(reply)

    except (RetryAfter, TimedOut):
        await update.message.reply_text("‚è≥ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ...")
        try:
            await update.message.reply_text(
                ai_reply if "ai_reply" in locals() and ai_reply else "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ."
            )
        except Exception:
            pass

    except BadRequest as e:
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ/—É—Å—Ç–∞—Ä–µ–ª–æ ‚Äî —à–ª—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–º
        await update.message.reply_text(
            ai_reply if "ai_reply" in locals() and ai_reply else f"‚ö†Ô∏è {e}"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")


async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    voice = update.message.voice

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ ~60—Å (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π STT)
    if voice and voice.duration and voice.duration > 60:
        await update.message.reply_text(
            "‚è±Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫ ‚Äî —É–∫–æ—Ä–æ—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        )
        return

    placeholder = await update.message.reply_text("üéô –ü—Ä–æ–±—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à—É –±–æ–ª—Ç–æ–≤–Ω—é‚Ä¶")

    try:
        tg_file = await context.bot.get_file(voice.file_id)

        # –°–∫–∞—á–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        buf = io.BytesIO()
        await tg_file.download_to_memory(out=buf)
        audio_bytes = buf.getvalue()

        text = await transcribe_oggopus(audio_bytes)
        if not text:
            try:
                await placeholder.edit_text(
                    "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
                )
            except Exception:
                await update.message.reply_text(
                    "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
                )
            return

        # –ü–æ–∫–∞–∂–µ–º, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏, –∏ —á—Ç–æ —Ç–µ–ø–µ—Ä—å ¬´–¥—É–º–∞–µ–º¬ª
        try:
            await placeholder.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´{text}¬ª\n\nü§î –î—É–º–∞–µ–º‚Ä¶")
        except Exception:
            # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass

        ai_reply = await ask_groq(text, user_id)
        reply = ai_reply or "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ, –±–µ–∑ –æ—Ç–≤–µ—Ç–∞."

        await placeholder.edit_text(reply)

    except (RetryAfter, TimedOut):
        # Telegram –ø—Ä–∏—Ç–æ—Ä–º–æ–∑–∏–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("‚è≥ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ...")
        try:
            # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ai_reply ‚Äî —à–ª—ë–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∫–≤–∏—Ç–æ–∫
            await update.message.reply_text(
                ai_reply if "ai_reply" in locals() and ai_reply else "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ."
            )
        except Exception:
            pass

    except BadRequest as e:
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ/—É—Å—Ç–∞—Ä–µ–ª–æ ‚Äî —à–ª—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–º
        await update.message.reply_text(
            ai_reply if "ai_reply" in locals() and ai_reply else f"‚ö†Ô∏è {e}"
        )

    except Exception as e:
        logging.exception(f"Voice handling failed: {e}")
        try:
            await placeholder.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except Exception:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def handle_unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§∑ –Ø —Ç–∞–∫–æ–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ."
    )
